// Minified docx.js library for DOCX generation
// This is a placeholder for the actual minified library
// In a real implementation, you would download the full minified library from:
// https://unpkg.com/docx@7.8.0/build/index.js

// Simplified version with core functionality for demo purposes
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.docx = {}));
})(this, (function(exports) {
  'use strict';

  // Core classes
  class Document {
    constructor(options) {
      this.options = options || {};
      this.sections = [];
    }
    
    addSection(section) {
      this.sections.push(section);
      return this;
    }
  }
  
  class Paragraph {
    constructor(options) {
      this.options = options || {};
      this.text = options.text || '';
      this.heading = options.heading;
      this.alignment = options.alignment;
      this.style = options.style;
      this.children = options.children || [];
      this.spacing = options.spacing || {};
    }
  }
  
  class TextRun {
    constructor(options) {
      this.options = options || {};
      this.text = options.text || '';
      this.bold = options.bold;
      this.italic = options.italic;
      this.style = options.style;
    }
  }
  
  class ImageRun {
    constructor(options) {
      this.options = options || {};
      this.data = options.data;
      this.transformation = options.transformation || {};
    }
  }
  
  class Table {
    constructor(options) {
      this.options = options || {};
      this.rows = options.rows || [];
      this.width = options.width;
      this.borders = options.borders || {};
    }
  }
  
  class TableRow {
    constructor(options) {
      this.options = options || {};
      this.children = options.children || [];
    }
  }
  
  class TableCell {
    constructor(options) {
      this.options = options || {};
      this.children = options.children || [];
      this.width = options.width;
    }
  }
  
  class PageBreak {}
  
  // Enums
  const HeadingLevel = {
    HEADING_1: 'Heading1',
    HEADING_2: 'Heading2',
    HEADING_3: 'Heading3',
    TITLE: 'Title'
  };
  
  const AlignmentType = {
    LEFT: 'left',
    CENTER: 'center',
    RIGHT: 'right',
    JUSTIFIED: 'justified'
  };
  
  const BorderStyle = {
    NONE: 'none',
    SINGLE: 'single',
    DOUBLE: 'double',
    DOTTED: 'dotted',
    DASHED: 'dashed'
  };
  
  // Packer for document generation
  const Packer = {
    toBuffer: async function(doc) {
      // In a real implementation, this would convert the document to a binary buffer
      // For this demo, we'll create a simple representation of the document
      const docJson = JSON.stringify(doc);
      
      // Convert to ArrayBuffer
      const encoder = new TextEncoder();
      const buffer = encoder.encode(docJson).buffer;
      
      return buffer;
    }
  };
  
  // Export all classes and enums
  exports.AlignmentType = AlignmentType;
  exports.BorderStyle = BorderStyle;
  exports.Document = Document;
  exports.HeadingLevel = HeadingLevel;
  exports.ImageRun = ImageRun;
  exports.Packer = Packer;
  exports.PageBreak = PageBreak;
  exports.Paragraph = Paragraph;
  exports.Table = Table;
  exports.TableCell = TableCell;
  exports.TableRow = TableRow;
  exports.TextRun = TextRun;
}));
